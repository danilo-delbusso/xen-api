name: Create release from tag

on:
  push:
    tags:
      - "v*"

jobs:
  build-python:
    name: Build and upload Python artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: |
          pip install build
          sudo apt-get install ocaml dune libfindlib-ocaml-dev libdune-ocaml-dev libcmdliner-ocaml-dev

      - name: Generate python package for XenAPI
        run: |
          ./configure --xapi_version=${{ github.ref_name }}
          make python

      - name: Store python distribution artifacts
        uses: actions/upload-artifact@v3
        with:
          name: XenAPI
          path: scripts/examples/python/dist/

  build-sdks:
    name: Build and upload SDK artifacts
    runs-on: ubuntu-latest
    env:
      XAPI_VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup XenAPI Environment
        uses: ./.github/workflows/setup-xapi-environment
        with:
          xapi_version: ${{ env.XAPI_VERSION }}

      - name: Set up dotnet CLI
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6"

      - name: Build C# SDK
        run: opam exec -- make build-csharp-sdk

      - name: Store C# SDK artifacts
        uses: actions/upload-artifact@v3
        with:
          name: XenServer.NET
          path: _build/install/default/xapi/sdk/csharp/src/bin/Release/XenServer.NET.${{ env.XAPI_VERSION }}-prerelease-devonly.nupkg

  release:
    runs-on: ubuntu-latest
    needs: [build-python, build-sdks]
    steps:
      - name: Retrieve python distribution artifacts
        uses: actions/download-artifact@v3
        with:
          name: XenAPI
          path: dist/

      - name: Retrieve Python SDK distribution artifacts
        uses: actions/download-artifact@v3
        with:
          name: XenAPI
          path: dist/

      - name: Retrieve C# SDK distribution artifacts
        uses: actions/download-artifact@v3
        with:
          name: XenServer.NET
          path: dist/

      - name: Create release ${{ github.ref_name }}
        run: gh release create ${{ github.ref_name }} --repo ${{ github.repository }} --generate-notes dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    runs-on: ubuntu-latest
    needs: release
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Retrieve python distribution artifacts
        uses: actions/download-artifact@v3
        with:
          name: XenAPI
          path: dist/

      - name: Publish the Python release to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
